/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
private:
    ListNode* getMid(ListNode* head){
        ListNode* slow=head;
        ListNode* fast=head;
        ListNode* prev=nullptr;
        while(fast!=nullptr && fast->next!=nullptr){
            prev=slow;
            slow=slow->next;
            fast=fast->next->next;
        }
        prev->next=nullptr;
        return slow;
    }
    ListNode* reverseNode(ListNode* head){
        ListNode* prev=nullptr;
        ListNode* curr=head;
        while(curr){
            ListNode* temp=curr->next;
            curr->next=prev;
            prev=curr;
            curr=temp;
        }
        return prev;
    }
    void merge(ListNode* L1,ListNode* L2){
        while(L2){
            ListNode* next=L1->next;
            L1->next=L2;
            L1=L2;
            L2=next;
        }
    }
public:
    void reorderList(ListNode* head) {
        if(!head || !head->next)
            return;

        ListNode* mid=getMid(head);
        ListNode* reversed=reverseNode(mid);
        merge(head,reversed);
    }
};
