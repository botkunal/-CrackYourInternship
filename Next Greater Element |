// Brute force approach time comlexity (n*m)
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        int n=nums1.size(),m=nums2.size();
        vector<int> ans(n);
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(nums1[i]==nums2[j]){
                    if(j+1 == m){
                        ans[i]=-1;
                    }
                    for(int k=j+1;k<m;k++){
                        if(nums1[i]<nums2[k]){
                            ans[i]=nums2[k];
                            break;
                        }
                        else{
                            ans[i]=-1;
                        }
                    }
                }
            }
        }
        return ans;
    }
};


// using stack time complexity(n)
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        stack<int> st;
        unordered_map<int,int> mp; // map for next greater element

        for(int num : nums2){
            while(!st.empty() && st.top()<num){// Pop elements from stack and update map with next greater element
                mp[st.top()] = num;
                st.pop();
            }
            st.push(num);// Push current element onto stack
        }
        for(int i=0;i<nums1.size();i++)// Check if each element in nums1 has a next greater element in map
            nums1[i] = mp.count(nums1[i]) ? mp[nums1[i]] : -1;// Update element in nums1 with next greater element or -1
        }
        
        return nums1;
    }
};
